// generated from rosidl_adapter/resource/srv.idl.em
// with input from deepracer_interfaces_pkg/srv/LidarConfigSrv.srv
// generated code does not contain a copyright notice


module deepracer_interfaces_pkg {
  module srv {
    @verbatim (language="comment", text=
      " Flag to add/stop LiDAR data to subsequent sensor messages.")
    struct LidarConfigSrv_Request {
      boolean use_lidar;

      @verbatim (language="comment", text=
        " Minimum LiDAR angle to consider while interpolating the LiDAR data.")
      float min_angle;

      @verbatim (language="comment", text=
        " Maximum LiDAR angle to consider while interpolating the LiDAR data.")
      float max_angle;

      @verbatim (language="comment", text=
        " Number of LiDAR distance value to interpolate the LiDAR data.")
      int32 num_values;

      @verbatim (language="comment", text=
        " Minimum distance from which the LiDAR distance data is considered valid.")
      float min_distance;

      @verbatim (language="comment", text=
        " Maximum distance up to which the LiDAR distance data is considered valid.")
      float max_distance;

      @verbatim (language="comment", text=
        " Distance value to clip the maximum LiDAR distance data.")
      float clipping_distance;

      @verbatim (language="comment", text=
        " Number of sectors to consider while processing LiDAR data as binary sectors.")
      int32 num_sectors;

      @verbatim (language="comment", text=
        " Type of LiDAR data preprocessing (SECTOR, DEFAULT).")
      int8 preprocess_type;
    };
    @verbatim (language="comment", text=
      " Error flag indicating successful/failed service call.")
    struct LidarConfigSrv_Response {
      int32 error;
    };
  };
};
