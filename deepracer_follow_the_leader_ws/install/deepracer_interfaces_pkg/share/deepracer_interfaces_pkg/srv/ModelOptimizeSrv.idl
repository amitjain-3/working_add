// generated from rosidl_adapter/resource/srv.idl.em
// with input from deepracer_interfaces_pkg/srv/ModelOptimizeSrv.srv
// generated code does not contain a copyright notice


module deepracer_interfaces_pkg {
  module srv {
    @verbatim (language="comment", text=
      " Name of the model folder where the model.pb file is present.")
    struct ModelOptimizeSrv_Request {
      string model_name;

      @verbatim (language="comment", text=
        " Identifiers for the sensors used by the model during training.")
      sequence<int32> model_metadata_sensors;

      @verbatim (language="comment", text=
        " Identifier for the training algorithm used by the model during training.")
      int32 training_algorithm;

      @verbatim (language="comment", text=
        " \"BGR\" / \"RGB\" image format required to be set to run optimizer.")
      string img_format;

      @verbatim (language="comment", text=
        " Width of the input image.")
      int32 width;

      @verbatim (language="comment", text=
        " Height of the input image.")
      int32 height;

      @verbatim (language="comment", text=
        " Number of channels of the input image.")
      int32 num_channels;

      @verbatim (language="comment", text=
        " Number of distance values the model expects for LiDAR head.")
      int32 lidar_channels;

      @verbatim (language="comment", text=
        " Identifier for the machine learning platform type used by the model during training." "\n"
        " (Tensorflow, mxnet)")
      int32 platform;
    };
    @verbatim (language="comment", text=
      " Path where the interemediate representation xml file for the model will be created.")
    struct ModelOptimizeSrv_Response {
      string artifact_path;

      @verbatim (language="comment", text=
        " Error flag indicating successful/failed service call.")
      int32 error;
    };
  };
};
